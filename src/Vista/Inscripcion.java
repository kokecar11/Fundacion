/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;
import Vista.Principal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author david
 */
public class Inscripcion extends javax.swing.JPanel {
    private Principal principal;
    public int panel=0;
    public long cedula=0;
    public String []cursosInscritos; 
    public int Numerocursos=0;
    public int seleccionCurso=-1;
    
    /**
     * Creates new form Inscripcion
     */
    public Inscripcion(Principal principal) {
        this.principal=principal;
        initComponents();
        CargarComboBox();
        DefaultTableModel modeloTabla= (DefaultTableModel) jTableCursos.getModel();
        modeloTabla.addColumn("Cursos");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelInscripcion = new javax.swing.JLabel();
        jLabelFechaInscripcion = new javax.swing.JLabel();
        jLabelEstado = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jLabelCursos = new javax.swing.JLabel();
        jComboBoxCursos = new javax.swing.JComboBox<>();
        jButtonAgregar = new javax.swing.JButton();
        jButtonSiguienteModificar = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCursos = new javax.swing.JTable();
        jDateChooserFechaInscripcion = new com.toedter.calendar.JDateChooser();
        jButtonQuitar = new javax.swing.JButton();
        jButtonInactividad = new javax.swing.JButton();

        jLabelInscripcion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelInscripcion.setText("INSCRIPCION");

        jLabelFechaInscripcion.setText("Fecha inscripcion");

        jLabelEstado.setText("Estado");

        jComboBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoActionPerformed(evt);
            }
        });

        jLabelCursos.setText("Cursos");

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonSiguienteModificar.setText("1");
        jButtonSiguienteModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteModificarActionPerformed(evt);
            }
        });

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jTableCursos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTableCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCursos.setFocusable(false);
        jTableCursos.getTableHeader().setReorderingAllowed(false);
        jTableCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CursosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCursos);

        jDateChooserFechaInscripcion.setDateFormatString("yyyy/MM/dd");

        jButtonQuitar.setText("Quitar");
        jButtonQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitarActionPerformed(evt);
            }
        });

        jButtonInactividad.setText("Inactividad");
        jButtonInactividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInactividadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(jButtonVolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSiguienteModificar)
                .addGap(120, 120, 120))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelInscripcion)
                .addGap(224, 224, 224))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jComboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jButtonAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonQuitar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelCursos)
                            .addComponent(jLabelFechaInscripcion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooserFechaInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabelEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButtonInactividad, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 19, Short.MAX_VALUE))
                            .addComponent(jComboBoxEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelInscripcion)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelFechaInscripcion)
                            .addComponent(jDateChooserFechaInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEstado)
                            .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCursos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAgregar)
                            .addComponent(jButtonQuitar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInactividad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSiguienteModificar)
                    .addComponent(jButtonVolver))
                .addGap(44, 44, 44))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSiguienteModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteModificarActionPerformed
        cambiarModificarSeguir();
    }//GEN-LAST:event_jButtonSiguienteModificarActionPerformed

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        cambiarVolver();
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        CargarTaller();
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitarActionPerformed
        QuitarCurso();
    }//GEN-LAST:event_jButtonQuitarActionPerformed

    private void CursosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CursosMouseClicked
        seleccionCurso= evt.getY() /jTableCursos.getRowHeight();         
    }//GEN-LAST:event_CursosMouseClicked

    private void jButtonInactividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInactividadActionPerformed
        CambiarReubicacion();
    }//GEN-LAST:event_jButtonInactividadActionPerformed

    private void jComboBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoActionPerformed
        EventoComboBox();
    }//GEN-LAST:event_jComboBoxEstadoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonInactividad;
    private javax.swing.JButton jButtonQuitar;
    private javax.swing.JButton jButtonSiguienteModificar;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxCursos;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private com.toedter.calendar.JDateChooser jDateChooserFechaInscripcion;
    private javax.swing.JLabel jLabelCursos;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelFechaInscripcion;
    private javax.swing.JLabel jLabelInscripcion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCursos;
    // End of variables declaration//GEN-END:variables
    private void CargarComboBox() {
        String estado[] = { "", "Activo", "Inactivo"};
        final DefaultComboBoxModel model = new DefaultComboBoxModel(estado);
        jComboBoxEstado.setModel(model);
        jDateChooserFechaInscripcion.getDateEditor().setEnabled(false);
    }
    public void CambiarPanel(int cambio){
        panel=cambio;
        if(cambio==1){
            jButtonSiguienteModificar.setText("Finalizar");
            jButtonInactividad.setVisible(false);
            jButtonAgregar.setEnabled(false);
            jButtonQuitar.setEnabled(false);
            jComboBoxCursos.setEnabled(false);
        }if(cambio==2){
            jButtonSiguienteModificar.setText("Modificar");
        }
    }
    private void cambiarModificarSeguir() {
        if(panel==1){
            if(verificar()){
                String fechaInscripcion =((JTextField)jDateChooserFechaInscripcion.getDateEditor().getUiComponent()).getText();
                boolean estado=true;
                if(((String) jComboBoxEstado.getSelectedItem()).equals("Activo")){
                    estado=true;
                }else{
                    estado=false;
                }
                if(principal.CrearInscripcion(fechaInscripcion,estado,cedula)){
                    if(Numerocursos>0){
                        String []cursos = new String[Numerocursos];
                        for(int i=0;i<Numerocursos;i++){
                            cursos[i]=(String) jTableCursos.getValueAt(i, 0);
                        }   
                        principal.CrearInscripcionTalleres(cursos,cedula);
                    }
                    principal.mostrarPanelHome();
                }else{
                    JOptionPane.showMessageDialog(null, "INSCRIPCION FALLIDA");
                }
            }
        }if(panel==2){
            if(verificar()){
                String fechaInscripcion =((JTextField)jDateChooserFechaInscripcion.getDateEditor().getUiComponent()).getText();
                boolean estado=true;
                if(((String) jComboBoxEstado.getSelectedItem()).equals("Activo")){
                    estado=true;
                }else{
                    estado=false;
                }
                if(principal.ModificarInscripcion(fechaInscripcion,estado,cedula)){
                    if(estado){
                        String []cursos = new String[Numerocursos];
                        for(int i=0;i<Numerocursos;i++){
                            cursos[i]=(String) jTableCursos.getValueAt(i, 0);
                        }   
                        principal.ModificarInscripcionTalleres(cursos,cedula);
                    }
                    principal.mostrarPanelModificar();
                    principal.CargarAlumnos();
                }else{
                    JOptionPane.showMessageDialog(null, "MODIFICACION FALLIDA");
                }
            }
        }
    }
    void CambiarCedual(long cedula) {
        this.cedula = cedula;
    }
    private void cambiarVolver() {
        if(panel==1){
            principal.mostrarPanelPreFamilia();
            principal.CambioPreFamilia(1);
            principal.CambioCedulaPreFamilia(cedula);
            principal.CargarFamiliaSalud(cedula);
            principal.EliminarReubicacion(cedula);
        }if(panel==2){
            for(int i=0;i<cursosInscritos.length;i++){
                if(principal.ConsultarInscripcionTallerPersona(cursosInscritos[i],cedula)){
                    principal.CrearInscripcionTaller(cursosInscritos[i],cedula);
                }
            }
            if(principal.ReubicacionExisteHistorial(cedula)){
                if(!principal.ReubicacionExiste(cedula)){
                    principal.EliminarReubicacion(cedula);
                }
            }
            principal.mostrarPanelModificar();
            principal.CargarAlumnos();
        }
    }

    public void CargarCursos() {
        int c=principal.ObtenerNumeroTalleresActivosConCupos()+1;
        String []datos=new String[c+1];
        datos=principal.CargarNombreTallere();
        for(int i=0;i<c;i++){
            jComboBoxCursos.addItem(datos[i]);
        }
    }

    private void Cargartabla(String dato) {
        if(!(dato.equals(""))){
            Object row[]= {dato};
            ((DefaultTableModel)jTableCursos.getModel()).addRow(row);
        }
    }

    private void CargarTaller() {
        if(!((String) jComboBoxCursos.getSelectedItem()).equals("")){
            Cargartabla((String) jComboBoxCursos.getSelectedItem());
            ModificarComboBox((String) jComboBoxCursos.getSelectedItem());
            Numerocursos++;
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONE UN CURSO");
        }    
    }

    private void ModificarComboBox(String dato) {
        int i=0;
        int x=0;
        while(i<=(principal.ObtenerNumeroTalleresActivosConCupos())-Numerocursos){
            if(((String) jComboBoxCursos.getItemAt(i)).equals(dato)){
                x=i;
            }
            i++;
        }
        jComboBoxCursos.removeItemAt(x);
        jComboBoxCursos.setSelectedIndex(0);
    }

    private void QuitarCurso() {
        if(seleccionCurso != -1){
            jComboBoxCursos.addItem((String) jTableCursos.getValueAt(seleccionCurso, 0));
            Numerocursos--;
            if(panel==2){
                for(int j=0;j<cursosInscritos.length;j++){
                    if(((String)jTableCursos.getValueAt(seleccionCurso, 0)).equals(cursosInscritos[j])){
                        principal.EliminarInscripcionTallerAlumno(cursosInscritos[j],cedula);
                    }
                }
            }
            ((DefaultTableModel)jTableCursos.getModel()).removeRow(seleccionCurso);
            seleccionCurso=-1;
        }else{
           JOptionPane.showMessageDialog(null, "SELECCIONE CURSO"); 
        }
    }

    private void EventoComboBox() {
        if(((String) jComboBoxEstado.getSelectedItem()).equals("Inactivo")){
            if(Numerocursos==0){
                jButtonInactividad.setEnabled(true);
                jButtonInactividad.setVisible(true);
                jButtonAgregar.setEnabled(false);
                jButtonQuitar.setEnabled(false);
                jComboBoxCursos.setEnabled(false);
            }else{
                int valor =JOptionPane.showConfirmDialog(this, "quiere eliminar todos los cursos","Confirmar",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(valor==JOptionPane.YES_OPTION){
                    for(int i=0;i<(principal.ObtenerNumeroTalleresActivosConCupos()+1)-Numerocursos;i++){
                        jComboBoxCursos.removeItemAt(0);
                    }
                    CargarCursos();
                    for(int i=0;i<Numerocursos;i++){
                        if(panel==2){
                            for(int j=0;j<cursosInscritos.length;j++){
                                if(((String)jTableCursos.getValueAt(0, 0)).equals(cursosInscritos[j])){
                                    principal.EliminarInscripcionTallerAlumno(cursosInscritos[j],cedula);
                                }
                            }
                            
                        }
                        ((DefaultTableModel)jTableCursos.getModel()).removeRow(0);
                    }  
                    Numerocursos=0;
                    jButtonInactividad.setEnabled(true);
                    jButtonInactividad.setVisible(true);
                    jButtonAgregar.setEnabled(false);
                    jButtonQuitar.setEnabled(false);
                    jComboBoxCursos.setEnabled(false);
                }else{
                    jComboBoxEstado.setSelectedIndex(1); 
                }
            }
        }else if(((String) jComboBoxEstado.getSelectedItem()).equals("Activo")){
            if((!principal.ReubicacionExiste(cedula))){
                int valor =JOptionPane.showConfirmDialog(this, "quiere eliminar el registro de inactividad","Confirmar",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(valor==JOptionPane.YES_OPTION){
                    jButtonInactividad.setEnabled(false);
                    jButtonInactividad.setVisible(false);
                    jButtonAgregar.setEnabled(true);
                    jButtonQuitar.setEnabled(true);
                    jComboBoxCursos.setEnabled(true);
                    principal.EliminarReubicacion(cedula);
                }else{
                   jComboBoxEstado.setSelectedIndex(2); 
                }    
            }else{
                jButtonInactividad.setEnabled(false);
                jButtonInactividad.setVisible(false);
                jButtonAgregar.setEnabled(true);
                jButtonQuitar.setEnabled(true);
                jComboBoxCursos.setEnabled(true);
            }
        }else{
            if(Numerocursos!=0||(!principal.ReubicacionExiste(cedula))){
                if(Numerocursos!=0){
                    int valor =JOptionPane.showConfirmDialog(this, "quiere eliminar todos los cursos","Confirmar",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if(valor==JOptionPane.YES_OPTION){
                        for(int i=0;i<(principal.ObtenerNumeroTalleresActivosConCupos()+1)-Numerocursos;i++){
                            jComboBoxCursos.removeItemAt(0);
                        }
                        CargarCursos();
                        for(int i=0;i<Numerocursos;i++){
                            if(panel==2){
                                for(int j=0;j<cursosInscritos.length;j++){
                                    if(((String)jTableCursos.getValueAt(0, 0)).equals(cursosInscritos[j])){
                                        principal.EliminarInscripcionTallerAlumno(cursosInscritos[j],cedula);
                                    }
                                }
                            }
                            ((DefaultTableModel)jTableCursos.getModel()).removeRow(0);
                        }  
                        Numerocursos=0;
                        jButtonInactividad.setEnabled(false);
                        jButtonInactividad.setVisible(false);
                        jButtonAgregar.setEnabled(false);
                        jButtonQuitar.setEnabled(false);
                        jComboBoxCursos.setEnabled(false);
                    }else{
                        jComboBoxEstado.setSelectedIndex(1); 
                    }
                }else{
                    int valor =JOptionPane.showConfirmDialog(this, "quiere eliminar el registro de inactividad","Confirmar",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if(valor==JOptionPane.YES_OPTION){
                        jButtonInactividad.setEnabled(false);
                        jButtonInactividad.setVisible(false);
                        jButtonAgregar.setEnabled(false);
                        jButtonQuitar.setEnabled(false);
                        jComboBoxCursos.setEnabled(false);
                        principal.EliminarReubicacion(cedula);
                    }else{
                       jComboBoxEstado.setSelectedIndex(2); 
                    }
                }
            }else{
                jButtonInactividad.setEnabled(false);
                jButtonInactividad.setVisible(false);
                jButtonAgregar.setEnabled(false);
                jButtonQuitar.setEnabled(false);
                jComboBoxCursos.setEnabled(false);
            }    
        }
    }

    private void CambiarReubicacion() {
        principal.mostrarPanelReubicacion();
        principal.CambioReubicacion(panel,cedula);
        principal.CargarReubicacion(cedula);
        if(panel==2){
            principal.GuardarCursosAlumno(cursosInscritos);
        }
    }
    void CargarCambiosInscripcion() {
        jComboBoxEstado.setSelectedIndex(2);
        jButtonInactividad.setVisible(true);
        jButtonInactividad.setEnabled(true);
        CargarCursos();
    }

    private boolean verificar() {
        if(((String) jComboBoxEstado.getSelectedItem()).equals("")){
            JOptionPane.showMessageDialog(null, "SELECCIONE UN ESTADO");
            return false;
        }else if((((JTextField)jDateChooserFechaInscripcion.getDateEditor().getUiComponent()).getText()).equals("")){
            JOptionPane.showMessageDialog(null, "INGRESE LA FECHA DE INSCRIPCION");
            return false;
        }
        return true;
    }

    void CargarInscripcion(String[] DatosInscripcion) {
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date date = null;
        try {
            date = formatter.parse(DatosInscripcion[0]);
        } catch (ParseException ex) {
            Logger.getLogger(Inscripcion.class.getName()).log(Level.SEVERE, null, ex);
        }
        jDateChooserFechaInscripcion.setDate(date);
        if(DatosInscripcion[1].equals("1")){
            jComboBoxEstado.setSelectedIndex(1);
            jButtonInactividad.setVisible(false);
            jButtonInactividad.setEnabled(false);
            jButtonAgregar.setEnabled(true);
            jButtonQuitar.setEnabled(true);
            jComboBoxCursos.setEnabled(true);
            Numerocursos=principal.NumeroTalleresInscritoAlumno(cedula);
            if(Numerocursos!=0){
                String []Inscripcion= new String[Numerocursos];
                cursosInscritos=new String[Numerocursos];
                Inscripcion=principal.ConsularInscripcionTalleresAlumno(cedula);
                cursosInscritos=Inscripcion;
                CargarCursos();
                for(int i =0;i<Numerocursos;i++){
                    Object row[]= {Inscripcion[i]};
                    ((DefaultTableModel)jTableCursos.getModel()).addRow(row);
                    int j=0;
                    int x=0;
                    int p=jComboBoxCursos.getItemCount();
                    while(j<p){
                        if(((String) jComboBoxCursos.getItemAt(j)).equals(Inscripcion[i])){
                            x=j;
                        }
                        j++;
                    }
                    if(x!=0){
                        jComboBoxCursos.removeItemAt(x);
                    }
                    
                }
            }else{
                CargarCursos();
                cursosInscritos=new String[0];
            }
            
        }else{
            cursosInscritos=new String[0];
            jComboBoxEstado.setSelectedIndex(2); 
            jButtonInactividad.setEnabled(true);
            jButtonInactividad.setVisible(true);
            jButtonAgregar.setEnabled(false);
            jButtonQuitar.setEnabled(false);
            jComboBoxCursos.setEnabled(false);
            CargarCursos();
        }
        
    }

    private void CargarTodosCursosActivos() {
        int c=principal.ObtenerNumeroTalleresActivos()+1;
        String []datos=new String[c+1];
        datos=principal.CargarNombreTalleres();
        for(int i=0;i<c;i++){
            jComboBoxCursos.addItem(datos[i]);
        }
    }

    void GuardarInscripcionAlumno(String[] cursosDeReubicacion) {
        cursosInscritos=cursosDeReubicacion;
    }

    private void cargarCombo() {
        
    }

}
